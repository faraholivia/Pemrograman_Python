{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Welcome To Colaboratory",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/HutriNindaOlivia/HutriNinda_PemrogramanPhython/blob/main/Welcome_To_Colaboratory.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "apUlQCLSwHLG",
        "outputId": "f9612c1d-a457-46fa-a39c-ff4622788e59",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dHIKp9whwIXJ",
        "outputId": "59ca8cc5-91da-4c9d-9bd5-ff80e124860f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "cd /content/drive/MyDrive/PHYTHONHUTRI"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content/drive/MyDrive/PHYTHONHUTRI\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-J_Bft0AwhxL",
        "outputId": "121617e4-cea5-4dc8-ac0e-ae069cd44f57",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "ls"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[0m\u001b[01;34m3scene\u001b[0m/  best_weight_scene_mobileNet.h5  coast_bea1.jpg  \u001b[01;34mnnmodel_scene\u001b[0m/\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4mKjsZ8-xCK2"
      },
      "source": [
        "# import the necessary packages\n",
        "from keras.models import Sequential\n",
        "from keras.layers.convolutional import Conv2D\n",
        "from keras.layers.convolutional import MaxPooling2D\n",
        "from keras.layers.core import Activation\n",
        "from keras.layers.core import Flatten\n",
        "from keras.layers.core import Dense\n",
        "from keras.optimizers import Adam\n",
        "from sklearn.preprocessing import LabelBinarizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report\n",
        "from PIL import Image\n",
        "from imutils import paths\n",
        "import numpy as np\n",
        "import os"
      ],
      "execution_count": 92,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ASXsT1y_xHif",
        "outputId": "ae60839e-5817-45b7-8c05-94d4ed73a35f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# grab all image paths in the input dataset directory, then initialize\n",
        "# our list of images and corresponding class labels\n",
        "print(\"[INFO] loading images...\")\n",
        "imagePaths = paths.list_images(\"3scene\")\n",
        "data = []\n",
        "labels = []"
      ],
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] loading images...\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FGMWiOyHxQXz"
      },
      "source": [
        "#loop over our input images\n",
        "for imagePath in imagePaths:\n",
        "\t# load the input image from disk, resize it to 64x64 pixels, scale\n",
        "\t# the pixel intensities to the range [0, 1], and then update our\n",
        "\t# images list\n",
        "\timage = Image.open(imagePath)\n",
        "\timage = np.array(image.resize((64, 64))) / 255.0\n",
        "\tdata.append(image)\n",
        "\n",
        "\t# extract the class label from the file path and update the\n",
        "\t# labels list\n",
        "\tlabel = imagePath.split(os.path.sep)[-2]\n",
        "\tlabels.append(label)"
      ],
      "execution_count": 94,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cz2QYSQVxUG8",
        "outputId": "be7623f0-b68e-4c25-ca9e-1aad150520f0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(labels)"
      ],
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'highway', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'coast', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest', 'forest']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xMuVaPMvxY1u"
      },
      "source": [
        "# encode the labels, converting them from strings to integers\n",
        "lb = LabelBinarizer()\n",
        "labels = lb.fit_transform(labels)"
      ],
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dDJ3_KQ-xe8N",
        "outputId": "03acff72-b058-4750-be7f-608347267ece",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(labels)"
      ],
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0 0 1]\n",
            " [0 0 1]\n",
            " [0 0 1]\n",
            " ...\n",
            " [0 1 0]\n",
            " [0 1 0]\n",
            " [0 1 0]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cJ4n0-o9xjRk",
        "outputId": "1f5dfc5c-5e86-4fd7-9bf1-6a2f8f4a891a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# perform a training and testing split, using 75% of the data for\n",
        "# training and 25% for evaluation\n",
        "(trainX, testX, trainY, testY) = train_test_split(np.array(data),\tnp.array(labels), test_size=0.25, shuffle=True)\n",
        "print(trainX.shape)\n",
        "print(testX.shape)"
      ],
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(711, 64, 64, 3)\n",
            "(237, 64, 64, 3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s5DHbA4hyQK6"
      },
      "source": [
        "from keras.applications.mobilenet import MobileNet\n",
        "from keras.callbacks import EarlyStopping, ModelCheckpoint\n",
        "from keras.models import Model\n",
        "from keras.layers import GlobalAveragePooling2D, BatchNormalization"
      ],
      "execution_count": 99,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7WTxKvYayY3O",
        "outputId": "90f2fcc7-d5ec-4b6f-b3b4-eab775886caf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from keras.layers import Dropout\n",
        "base_model = MobileNet(weights='imagenet', include_top=False)\n",
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = Dropout(0.5)(x)\n",
        "x = BatchNormalization()(x)\n",
        "x = Dense(512, activation='relu')(x)\n",
        "out = Dense(3, activation='softmax')(x)\n",
        "\n",
        "model = Model(inputs=base_model.input, outputs=out)\n",
        "model.summary()"
      ],
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:`input_shape` is undefined or non-square, or `rows` is not in [128, 160, 192, 224]. Weights for input shape (224, 224) will be loaded as the default.\n",
            "Model: \"functional_5\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_3 (InputLayer)         [(None, None, None, 3)]   0         \n",
            "_________________________________________________________________\n",
            "conv1_pad (ZeroPadding2D)    (None, None, None, 3)     0         \n",
            "_________________________________________________________________\n",
            "conv1 (Conv2D)               (None, None, None, 32)    864       \n",
            "_________________________________________________________________\n",
            "conv1_bn (BatchNormalization (None, None, None, 32)    128       \n",
            "_________________________________________________________________\n",
            "conv1_relu (ReLU)            (None, None, None, 32)    0         \n",
            "_________________________________________________________________\n",
            "conv_dw_1 (DepthwiseConv2D)  (None, None, None, 32)    288       \n",
            "_________________________________________________________________\n",
            "conv_dw_1_bn (BatchNormaliza (None, None, None, 32)    128       \n",
            "_________________________________________________________________\n",
            "conv_dw_1_relu (ReLU)        (None, None, None, 32)    0         \n",
            "_________________________________________________________________\n",
            "conv_pw_1 (Conv2D)           (None, None, None, 64)    2048      \n",
            "_________________________________________________________________\n",
            "conv_pw_1_bn (BatchNormaliza (None, None, None, 64)    256       \n",
            "_________________________________________________________________\n",
            "conv_pw_1_relu (ReLU)        (None, None, None, 64)    0         \n",
            "_________________________________________________________________\n",
            "conv_pad_2 (ZeroPadding2D)   (None, None, None, 64)    0         \n",
            "_________________________________________________________________\n",
            "conv_dw_2 (DepthwiseConv2D)  (None, None, None, 64)    576       \n",
            "_________________________________________________________________\n",
            "conv_dw_2_bn (BatchNormaliza (None, None, None, 64)    256       \n",
            "_________________________________________________________________\n",
            "conv_dw_2_relu (ReLU)        (None, None, None, 64)    0         \n",
            "_________________________________________________________________\n",
            "conv_pw_2 (Conv2D)           (None, None, None, 128)   8192      \n",
            "_________________________________________________________________\n",
            "conv_pw_2_bn (BatchNormaliza (None, None, None, 128)   512       \n",
            "_________________________________________________________________\n",
            "conv_pw_2_relu (ReLU)        (None, None, None, 128)   0         \n",
            "_________________________________________________________________\n",
            "conv_dw_3 (DepthwiseConv2D)  (None, None, None, 128)   1152      \n",
            "_________________________________________________________________\n",
            "conv_dw_3_bn (BatchNormaliza (None, None, None, 128)   512       \n",
            "_________________________________________________________________\n",
            "conv_dw_3_relu (ReLU)        (None, None, None, 128)   0         \n",
            "_________________________________________________________________\n",
            "conv_pw_3 (Conv2D)           (None, None, None, 128)   16384     \n",
            "_________________________________________________________________\n",
            "conv_pw_3_bn (BatchNormaliza (None, None, None, 128)   512       \n",
            "_________________________________________________________________\n",
            "conv_pw_3_relu (ReLU)        (None, None, None, 128)   0         \n",
            "_________________________________________________________________\n",
            "conv_pad_4 (ZeroPadding2D)   (None, None, None, 128)   0         \n",
            "_________________________________________________________________\n",
            "conv_dw_4 (DepthwiseConv2D)  (None, None, None, 128)   1152      \n",
            "_________________________________________________________________\n",
            "conv_dw_4_bn (BatchNormaliza (None, None, None, 128)   512       \n",
            "_________________________________________________________________\n",
            "conv_dw_4_relu (ReLU)        (None, None, None, 128)   0         \n",
            "_________________________________________________________________\n",
            "conv_pw_4 (Conv2D)           (None, None, None, 256)   32768     \n",
            "_________________________________________________________________\n",
            "conv_pw_4_bn (BatchNormaliza (None, None, None, 256)   1024      \n",
            "_________________________________________________________________\n",
            "conv_pw_4_relu (ReLU)        (None, None, None, 256)   0         \n",
            "_________________________________________________________________\n",
            "conv_dw_5 (DepthwiseConv2D)  (None, None, None, 256)   2304      \n",
            "_________________________________________________________________\n",
            "conv_dw_5_bn (BatchNormaliza (None, None, None, 256)   1024      \n",
            "_________________________________________________________________\n",
            "conv_dw_5_relu (ReLU)        (None, None, None, 256)   0         \n",
            "_________________________________________________________________\n",
            "conv_pw_5 (Conv2D)           (None, None, None, 256)   65536     \n",
            "_________________________________________________________________\n",
            "conv_pw_5_bn (BatchNormaliza (None, None, None, 256)   1024      \n",
            "_________________________________________________________________\n",
            "conv_pw_5_relu (ReLU)        (None, None, None, 256)   0         \n",
            "_________________________________________________________________\n",
            "conv_pad_6 (ZeroPadding2D)   (None, None, None, 256)   0         \n",
            "_________________________________________________________________\n",
            "conv_dw_6 (DepthwiseConv2D)  (None, None, None, 256)   2304      \n",
            "_________________________________________________________________\n",
            "conv_dw_6_bn (BatchNormaliza (None, None, None, 256)   1024      \n",
            "_________________________________________________________________\n",
            "conv_dw_6_relu (ReLU)        (None, None, None, 256)   0         \n",
            "_________________________________________________________________\n",
            "conv_pw_6 (Conv2D)           (None, None, None, 512)   131072    \n",
            "_________________________________________________________________\n",
            "conv_pw_6_bn (BatchNormaliza (None, None, None, 512)   2048      \n",
            "_________________________________________________________________\n",
            "conv_pw_6_relu (ReLU)        (None, None, None, 512)   0         \n",
            "_________________________________________________________________\n",
            "conv_dw_7 (DepthwiseConv2D)  (None, None, None, 512)   4608      \n",
            "_________________________________________________________________\n",
            "conv_dw_7_bn (BatchNormaliza (None, None, None, 512)   2048      \n",
            "_________________________________________________________________\n",
            "conv_dw_7_relu (ReLU)        (None, None, None, 512)   0         \n",
            "_________________________________________________________________\n",
            "conv_pw_7 (Conv2D)           (None, None, None, 512)   262144    \n",
            "_________________________________________________________________\n",
            "conv_pw_7_bn (BatchNormaliza (None, None, None, 512)   2048      \n",
            "_________________________________________________________________\n",
            "conv_pw_7_relu (ReLU)        (None, None, None, 512)   0         \n",
            "_________________________________________________________________\n",
            "conv_dw_8 (DepthwiseConv2D)  (None, None, None, 512)   4608      \n",
            "_________________________________________________________________\n",
            "conv_dw_8_bn (BatchNormaliza (None, None, None, 512)   2048      \n",
            "_________________________________________________________________\n",
            "conv_dw_8_relu (ReLU)        (None, None, None, 512)   0         \n",
            "_________________________________________________________________\n",
            "conv_pw_8 (Conv2D)           (None, None, None, 512)   262144    \n",
            "_________________________________________________________________\n",
            "conv_pw_8_bn (BatchNormaliza (None, None, None, 512)   2048      \n",
            "_________________________________________________________________\n",
            "conv_pw_8_relu (ReLU)        (None, None, None, 512)   0         \n",
            "_________________________________________________________________\n",
            "conv_dw_9 (DepthwiseConv2D)  (None, None, None, 512)   4608      \n",
            "_________________________________________________________________\n",
            "conv_dw_9_bn (BatchNormaliza (None, None, None, 512)   2048      \n",
            "_________________________________________________________________\n",
            "conv_dw_9_relu (ReLU)        (None, None, None, 512)   0         \n",
            "_________________________________________________________________\n",
            "conv_pw_9 (Conv2D)           (None, None, None, 512)   262144    \n",
            "_________________________________________________________________\n",
            "conv_pw_9_bn (BatchNormaliza (None, None, None, 512)   2048      \n",
            "_________________________________________________________________\n",
            "conv_pw_9_relu (ReLU)        (None, None, None, 512)   0         \n",
            "_________________________________________________________________\n",
            "conv_dw_10 (DepthwiseConv2D) (None, None, None, 512)   4608      \n",
            "_________________________________________________________________\n",
            "conv_dw_10_bn (BatchNormaliz (None, None, None, 512)   2048      \n",
            "_________________________________________________________________\n",
            "conv_dw_10_relu (ReLU)       (None, None, None, 512)   0         \n",
            "_________________________________________________________________\n",
            "conv_pw_10 (Conv2D)          (None, None, None, 512)   262144    \n",
            "_________________________________________________________________\n",
            "conv_pw_10_bn (BatchNormaliz (None, None, None, 512)   2048      \n",
            "_________________________________________________________________\n",
            "conv_pw_10_relu (ReLU)       (None, None, None, 512)   0         \n",
            "_________________________________________________________________\n",
            "conv_dw_11 (DepthwiseConv2D) (None, None, None, 512)   4608      \n",
            "_________________________________________________________________\n",
            "conv_dw_11_bn (BatchNormaliz (None, None, None, 512)   2048      \n",
            "_________________________________________________________________\n",
            "conv_dw_11_relu (ReLU)       (None, None, None, 512)   0         \n",
            "_________________________________________________________________\n",
            "conv_pw_11 (Conv2D)          (None, None, None, 512)   262144    \n",
            "_________________________________________________________________\n",
            "conv_pw_11_bn (BatchNormaliz (None, None, None, 512)   2048      \n",
            "_________________________________________________________________\n",
            "conv_pw_11_relu (ReLU)       (None, None, None, 512)   0         \n",
            "_________________________________________________________________\n",
            "conv_pad_12 (ZeroPadding2D)  (None, None, None, 512)   0         \n",
            "_________________________________________________________________\n",
            "conv_dw_12 (DepthwiseConv2D) (None, None, None, 512)   4608      \n",
            "_________________________________________________________________\n",
            "conv_dw_12_bn (BatchNormaliz (None, None, None, 512)   2048      \n",
            "_________________________________________________________________\n",
            "conv_dw_12_relu (ReLU)       (None, None, None, 512)   0         \n",
            "_________________________________________________________________\n",
            "conv_pw_12 (Conv2D)          (None, None, None, 1024)  524288    \n",
            "_________________________________________________________________\n",
            "conv_pw_12_bn (BatchNormaliz (None, None, None, 1024)  4096      \n",
            "_________________________________________________________________\n",
            "conv_pw_12_relu (ReLU)       (None, None, None, 1024)  0         \n",
            "_________________________________________________________________\n",
            "conv_dw_13 (DepthwiseConv2D) (None, None, None, 1024)  9216      \n",
            "_________________________________________________________________\n",
            "conv_dw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      \n",
            "_________________________________________________________________\n",
            "conv_dw_13_relu (ReLU)       (None, None, None, 1024)  0         \n",
            "_________________________________________________________________\n",
            "conv_pw_13 (Conv2D)          (None, None, None, 1024)  1048576   \n",
            "_________________________________________________________________\n",
            "conv_pw_13_bn (BatchNormaliz (None, None, None, 1024)  4096      \n",
            "_________________________________________________________________\n",
            "conv_pw_13_relu (ReLU)       (None, None, None, 1024)  0         \n",
            "_________________________________________________________________\n",
            "global_average_pooling2d_2 ( (None, 1024)              0         \n",
            "_________________________________________________________________\n",
            "dropout_2 (Dropout)          (None, 1024)              0         \n",
            "_________________________________________________________________\n",
            "batch_normalization_2 (Batch (None, 1024)              4096      \n",
            "_________________________________________________________________\n",
            "dense_4 (Dense)              (None, 512)               524800    \n",
            "_________________________________________________________________\n",
            "dense_5 (Dense)              (None, 3)                 1539      \n",
            "=================================================================\n",
            "Total params: 3,759,299\n",
            "Trainable params: 3,735,363\n",
            "Non-trainable params: 23,936\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FM2JhQYWycim"
      },
      "source": [
        "es = EarlyStopping(monitor='val_loss',\n",
        "                   patience=5,\n",
        "                   mode='auto',\n",
        "                   restore_best_weights=True)\n",
        "checkpoint = ModelCheckpoint('best_weight_scene_mobileNet.h5',\n",
        "                             monitor='val_accuracy',\n",
        "                             verbose=1,\n",
        "                             save_best_only=True,\n",
        "                             mode='auto',)"
      ],
      "execution_count": 101,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9woacHD6yjrS"
      },
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers.core import Flatten\n",
        "from keras.layers.core import Dense\n",
        "\n",
        "model = Sequential(\n",
        "    [\n",
        "        Flatten(input_shape=(64*64*3,)),\n",
        "        Dense(100, activation=\"relu\", name=\"layer1\"),\n",
        "        Dense(16, activation=\"relu\", name=\"layer2\"),\n",
        "        Dense(16, activation=\"relu\", name=\"layer3\"),\n",
        "        Dense(3, activation = \"softmax\", name=\"layer4\"),\n",
        "    ]\n",
        ")"
      ],
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DtQXo3fiyrva",
        "outputId": "21fe8c1c-d1af-4e90-cf81-8565cc4dc64d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "flatten_2 (Flatten)          (None, 12288)             0         \n",
            "_________________________________________________________________\n",
            "layer1 (Dense)               (None, 100)               1228900   \n",
            "_________________________________________________________________\n",
            "layer2 (Dense)               (None, 16)                1616      \n",
            "_________________________________________________________________\n",
            "layer3 (Dense)               (None, 16)                272       \n",
            "_________________________________________________________________\n",
            "layer4 (Dense)               (None, 3)                 51        \n",
            "=================================================================\n",
            "Total params: 1,230,839\n",
            "Trainable params: 1,230,839\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MUo-wyzayvCD",
        "outputId": "68422532-40fa-4fb4-d5d6-0c3695b0ea85",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# train the model using the Adam optimizer\n",
        "print(\"[INFO] training network...\")\n",
        "opt = Adam(lr=1e-3, decay=1e-3 / 50)\n",
        "model.compile(loss=\"categorical_crossentropy\", optimizer=opt,\n",
        "\tmetrics=[\"accuracy\"])\n",
        "H = model.fit(trainX, trainY, validation_data=(testX, testY), epochs=25, batch_size=32, callbacks=[es, checkpoint])\n"
      ],
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] training network...\n",
            "Epoch 1/25\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 12288) for input Tensor(\"flatten_2_input:0\", shape=(None, 12288), dtype=float32), but it was called on an input with incompatible shape (None, 64, 64, 3).\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 12288) for input Tensor(\"flatten_2_input:0\", shape=(None, 12288), dtype=float32), but it was called on an input with incompatible shape (None, 64, 64, 3).\n",
            "20/23 [=========================>....] - ETA: 0s - loss: 1.6547 - accuracy: 0.3516WARNING:tensorflow:Model was constructed with shape (None, 12288) for input Tensor(\"flatten_2_input:0\", shape=(None, 12288), dtype=float32), but it was called on an input with incompatible shape (None, 64, 64, 3).\n",
            "\n",
            "Epoch 00001: val_accuracy improved from -inf to 0.42616, saving model to best_weight_scene_mobileNet.h5\n",
            "23/23 [==============================] - 1s 53ms/step - loss: 1.5998 - accuracy: 0.3404 - val_loss: 1.0958 - val_accuracy: 0.4262\n",
            "Epoch 2/25\n",
            "19/23 [=======================>......] - ETA: 0s - loss: 1.0973 - accuracy: 0.3701\n",
            "Epoch 00002: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 14ms/step - loss: 1.0974 - accuracy: 0.3643 - val_loss: 1.0934 - val_accuracy: 0.4262\n",
            "Epoch 3/25\n",
            "23/23 [==============================] - ETA: 0s - loss: 1.0961 - accuracy: 0.3643\n",
            "Epoch 00003: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 14ms/step - loss: 1.0961 - accuracy: 0.3643 - val_loss: 1.0917 - val_accuracy: 0.4262\n",
            "Epoch 4/25\n",
            "20/23 [=========================>....] - ETA: 0s - loss: 1.0941 - accuracy: 0.3781\n",
            "Epoch 00004: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 13ms/step - loss: 1.0950 - accuracy: 0.3643 - val_loss: 1.0903 - val_accuracy: 0.4262\n",
            "Epoch 5/25\n",
            "22/23 [===========================>..] - ETA: 0s - loss: 1.0942 - accuracy: 0.3636\n",
            "Epoch 00005: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 15ms/step - loss: 1.0942 - accuracy: 0.3643 - val_loss: 1.0898 - val_accuracy: 0.4262\n",
            "Epoch 6/25\n",
            "23/23 [==============================] - ETA: 0s - loss: 1.0936 - accuracy: 0.3643\n",
            "Epoch 00006: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 14ms/step - loss: 1.0936 - accuracy: 0.3643 - val_loss: 1.0890 - val_accuracy: 0.4262\n",
            "Epoch 7/25\n",
            "21/23 [==========================>...] - ETA: 0s - loss: 1.0933 - accuracy: 0.3661\n",
            "Epoch 00007: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 13ms/step - loss: 1.0929 - accuracy: 0.3643 - val_loss: 1.0878 - val_accuracy: 0.4262\n",
            "Epoch 8/25\n",
            "21/23 [==========================>...] - ETA: 0s - loss: 1.0926 - accuracy: 0.3646\n",
            "Epoch 00008: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 13ms/step - loss: 1.0924 - accuracy: 0.3643 - val_loss: 1.0874 - val_accuracy: 0.4262\n",
            "Epoch 9/25\n",
            "19/23 [=======================>......] - ETA: 0s - loss: 1.0919 - accuracy: 0.3618\n",
            "Epoch 00009: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 14ms/step - loss: 1.0921 - accuracy: 0.3643 - val_loss: 1.0867 - val_accuracy: 0.4262\n",
            "Epoch 10/25\n",
            "19/23 [=======================>......] - ETA: 0s - loss: 1.0918 - accuracy: 0.3586\n",
            "Epoch 00010: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 13ms/step - loss: 1.0919 - accuracy: 0.3643 - val_loss: 1.0863 - val_accuracy: 0.4262\n",
            "Epoch 11/25\n",
            "19/23 [=======================>......] - ETA: 0s - loss: 1.0912 - accuracy: 0.3684\n",
            "Epoch 00011: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 13ms/step - loss: 1.0919 - accuracy: 0.3643 - val_loss: 1.0858 - val_accuracy: 0.4262\n",
            "Epoch 12/25\n",
            "19/23 [=======================>......] - ETA: 0s - loss: 1.0922 - accuracy: 0.3503\n",
            "Epoch 00012: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 14ms/step - loss: 1.0917 - accuracy: 0.3643 - val_loss: 1.0863 - val_accuracy: 0.4262\n",
            "Epoch 13/25\n",
            "19/23 [=======================>......] - ETA: 0s - loss: 1.0955 - accuracy: 0.3470\n",
            "Epoch 00013: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 13ms/step - loss: 1.0915 - accuracy: 0.3643 - val_loss: 1.0862 - val_accuracy: 0.4262\n",
            "Epoch 14/25\n",
            "23/23 [==============================] - ETA: 0s - loss: 1.0916 - accuracy: 0.3643\n",
            "Epoch 00014: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 14ms/step - loss: 1.0916 - accuracy: 0.3643 - val_loss: 1.0857 - val_accuracy: 0.4262\n",
            "Epoch 15/25\n",
            "23/23 [==============================] - ETA: 0s - loss: 1.0915 - accuracy: 0.3643\n",
            "Epoch 00015: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 14ms/step - loss: 1.0915 - accuracy: 0.3643 - val_loss: 1.0858 - val_accuracy: 0.4262\n",
            "Epoch 16/25\n",
            "21/23 [==========================>...] - ETA: 0s - loss: 1.0908 - accuracy: 0.3690\n",
            "Epoch 00016: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 13ms/step - loss: 1.0914 - accuracy: 0.3643 - val_loss: 1.0859 - val_accuracy: 0.4262\n",
            "Epoch 17/25\n",
            "21/23 [==========================>...] - ETA: 0s - loss: 1.0920 - accuracy: 0.3646\n",
            "Epoch 00017: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 14ms/step - loss: 1.0913 - accuracy: 0.3643 - val_loss: 1.0866 - val_accuracy: 0.4262\n",
            "Epoch 18/25\n",
            "23/23 [==============================] - ETA: 0s - loss: 1.0913 - accuracy: 0.3643\n",
            "Epoch 00018: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 14ms/step - loss: 1.0913 - accuracy: 0.3643 - val_loss: 1.0865 - val_accuracy: 0.4262\n",
            "Epoch 19/25\n",
            "21/23 [==========================>...] - ETA: 0s - loss: 1.0913 - accuracy: 0.3661\n",
            "Epoch 00019: val_accuracy did not improve from 0.42616\n",
            "23/23 [==============================] - 0s 15ms/step - loss: 1.0914 - accuracy: 0.3643 - val_loss: 1.0862 - val_accuracy: 0.4262\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T9vy2b3fy44_",
        "outputId": "b9906b31-2b2d-4818-ea2a-43a2b4a2055b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "print(H.history.keys())\n",
        "# summarize history for accuracy\n",
        "plt.plot(H.history['accuracy'])\n",
        "plt.plot(H.history['val_accuracy'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "# summarize history for loss\n",
        "plt.plot(H.history['loss'])\n",
        "plt.plot(H.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Slu34MxuzAz7",
        "outputId": "bcc06ea6-4fe7-4e7d-b8ac-d5b981562c22",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# evaluate the network\n",
        "print(\"[INFO] evaluating network...\")\n",
        "predictions = model.predict(testX, batch_size=32)\n",
        "print(classification_report(testY.argmax(axis=1),\n",
        "\tpredictions.argmax(axis=1), target_names=lb.classes_))"
      ],
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] evaluating network...\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 12288) for input Tensor(\"flatten_2_input:0\", shape=(None, 12288), dtype=float32), but it was called on an input with incompatible shape (None, 64, 64, 3).\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "       coast       0.43      1.00      0.60       101\n",
            "      forest       0.00      0.00      0.00        73\n",
            "     highway       0.00      0.00      0.00        63\n",
            "\n",
            "    accuracy                           0.43       237\n",
            "   macro avg       0.14      0.33      0.20       237\n",
            "weighted avg       0.18      0.43      0.25       237\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "meUu55Ew3Urp",
        "outputId": "502a0126-479c-4b59-c602-5ae9cf87a8ac",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "model.save('nnmodel_scene')"
      ],
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Assets written to: nnmodel_scene/assets\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JqMpzVFc3h6J"
      },
      "source": [
        "import cv2\n",
        "import matplotlib.pyplot as plt\n",
        "image1='coast_sun57.jpg'"
      ],
      "execution_count": 116,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nZKrThdi3npr",
        "outputId": "95948740-094f-4eaf-a722-784bef1349e0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 606
        }
      },
      "source": [
        "img_array = cv2.imread(image1)\n",
        "plt.imshow(img_array)\n",
        "plt.show()\n",
        "# print(type(img_array))"
      ],
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-117-6f36096759bd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mimg_array\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg_array\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# print(type(img_array))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mimshow\u001b[0;34m(X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, data, **kwargs)\u001b[0m\n\u001b[1;32m   2649\u001b[0m         \u001b[0mfilternorm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfilternorm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilterrad\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfilterrad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimlim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mimlim\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2650\u001b[0m         resample=resample, url=url, **({\"data\": data} if data is not\n\u001b[0;32m-> 2651\u001b[0;31m         None else {}), **kwargs)\n\u001b[0m\u001b[1;32m   2652\u001b[0m     \u001b[0msci\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m__ret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2653\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0m__ret\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1563\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1564\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1565\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1566\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1567\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    356\u001b[0m                 \u001b[0;34mf\"%(removal)s.  If any parameter follows {name!r}, they \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    357\u001b[0m                 f\"should be pass as keyword, not positionally.\")\n\u001b[0;32m--> 358\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    359\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    360\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    356\u001b[0m                 \u001b[0;34mf\"%(removal)s.  If any parameter follows {name!r}, they \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    357\u001b[0m                 f\"should be pass as keyword, not positionally.\")\n\u001b[0;32m--> 358\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    359\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    360\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mimshow\u001b[0;34m(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, **kwargs)\u001b[0m\n\u001b[1;32m   5624\u001b[0m                               resample=resample, **kwargs)\n\u001b[1;32m   5625\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5626\u001b[0;31m         \u001b[0mim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5627\u001b[0m         \u001b[0mim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_alpha\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5628\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_clip_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36mset_data\u001b[0;34m(self, A)\u001b[0m\n\u001b[1;32m    692\u001b[0m                 not np.can_cast(self._A.dtype, float, \"same_kind\")):\n\u001b[1;32m    693\u001b[0m             raise TypeError(\"Image data of dtype {} cannot be converted to \"\n\u001b[0;32m--> 694\u001b[0;31m                             \"float\".format(self._A.dtype))\n\u001b[0m\u001b[1;32m    695\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    696\u001b[0m         if not (self._A.ndim == 2\n",
            "\u001b[0;31mTypeError\u001b[0m: Image data of dtype object cannot be converted to float"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k1PSBZpW3uLU",
        "outputId": "ce9e3757-65e5-434f-fa49-9c89ea34f536",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        }
      },
      "source": [
        "image_testing = Image.open('coast_sun57.jpg')\n",
        "image_testing = np.array(image_testing.resize((64, 64))) / 255.0\n",
        "image_testing.shape"
      ],
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-118-8f1cf01e87af>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mimage_testing\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'coast_sun57.jpg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mimage_testing\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage_testing\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m64\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m64\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m255.0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mimage_testing\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/PIL/Image.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(fp, mode)\u001b[0m\n\u001b[1;32m   2807\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2808\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2809\u001b[0;31m         \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltins\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2810\u001b[0m         \u001b[0mexclusive_fp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2811\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'coast_sun57.jpg'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fn9sjxyi3zUC",
        "outputId": "808e92a1-60c6-41a5-a5a6-c1f79c4880fc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        }
      },
      "source": [
        "image_testing = np.expand_dims(image_testing, axis=0)\n",
        "print(image_testing.shape)"
      ],
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-119-655a2f7494ea>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mimage_testing\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpand_dims\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage_testing\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage_testing\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'image_testing' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MzT49G3q34s2",
        "outputId": "ea8ce952-1e71-4eec-b634-e393a61f95be",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        }
      },
      "source": [
        "output = model.predict(image_testing, 1)\n",
        "print(output)\n",
        "print(lb.classes_[output.argmax(axis=1)])"
      ],
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-120-a7f428716c69>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage_testing\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses_\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'image_testing' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hH7wwIMa39Z7"
      },
      "source": [
        ""
      ],
      "execution_count": 120,
      "outputs": []
    }
  ]
}
